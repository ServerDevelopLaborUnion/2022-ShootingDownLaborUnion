// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class LoginRequest {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
    static type = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): LoginRequest {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsLoginRequest(bb: flatbuffers.ByteBuffer, obj?: LoginRequest): LoginRequest {
    return (obj || new LoginRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsLoginRequest(bb: flatbuffers.ByteBuffer, obj?: LoginRequest): LoginRequest {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new LoginRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  username(): string | null
  username(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null
  username(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  password(): string | null
  password(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null
  password(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  static startLoginRequest(builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static addUsername(builder: flatbuffers.Builder, usernameOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, usernameOffset, 0);
  }

  static addPassword(builder: flatbuffers.Builder, passwordOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, passwordOffset, 0);
  }

  static endLoginRequest(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createLoginRequest(builder: flatbuffers.Builder, usernameOffset: flatbuffers.Offset, passwordOffset: flatbuffers.Offset): flatbuffers.Offset {
    LoginRequest.startLoginRequest(builder);
    LoginRequest.addUsername(builder, usernameOffset);
    LoginRequest.addPassword(builder, passwordOffset);
    return LoginRequest.endLoginRequest(builder);
  }
}
